#define TRACE_LENGTH    128
#define	LATCH_TOLERANCE	90

object tdm_latch
{
	void init();
	void frobabilityLoop();
	boolean checkTolerance();
	boolean checkObstruction();
	void frobResponse();

	float latchState;	//1 = up, 0 = down
	entity door;		//door entity
};

void tdm_latch::init()
{
	//find the door among this latch's targets
	float i;

	for(i = 0; i < numTargets(); i++)
	{
	    entity e = getTarget(i);
	
	    if( e.getKey("spawnclass") == "CFrobDoor" )
	    {
	        door = e;
	        break;        //stop searching for targeted doors, already found one
	    }
	}

	//start checking whether the player is allowed to frob the latch
	thread frobabilityLoop();
}

void tdm_latch::frobabilityLoop()
{
    vector latchPos = getWorldOrigin();
    setFrobable(0);

    while(1)
    {
        sys.wait(0.2);
        if( sys.vecLength($player1.getOrigin() - latchPos )  < TRACE_LENGTH )
            continue;    //skip if the player is too far away

        //player either has to be on the right side of the door or be able to reach through to the latch for it to be frobable
        setFrobable( checkTolerance || checkObstruction );
    }
}

boolean tdm_latch::checkObstruction()
{
    vector TraceDir        = sys.vecNormalize( $player1.getViewAngles() );
    vector TraceRadius    = getVectorKey("trace_radius");    //as a vector
    vector TraceStart    = $player1.getEyePos();
    vector TraceEnd        = TraceStart + TraceDir * TRACE_LENGTH;

    //check whether there is a clear line from the player's eyes to the latch
    float TraceResult    = sys.trace( TraceStart, TraceEnd, -TraceRadius, TraceRadius, CONTENTS_SOLID, self );


    if( TraceResult == 1 )
        return true;    //clear line

    else if( sys.getTraceEntity().getBindMaster() == self )
        return true;    //trace has hit something that's bound to the latch

    else
        return false;    //line is obstructed by something else
}

boolean tdm_latch::checkTolerance()
{
    vector LatchNormal = getVectorKey( "latch_normal" );
    vector AngToPlayer = sys.vecToAngles( $player1.getOrigin() - getOrigin() );

    //check whether the player is standing within the latch tolerance
    return ( abs(anglemod180(AngToPlayer - LatchNormal)) < LATCH_TOLERANCE )
}


void tdm_latch::frobResponse()
{
	if( isMoving() || isRotating() )
		return;

	latchState = -latchState;

	time( getFloatKey("move_time") );
	moveToPos( getVectorKey("origin") + (1 - latchState) * getVectorKey("translate") );
	rotateOnce( (2*latchState - 1) * getVectorKey("rotate") );

	sys.wait( getFloatKey("move_time") );
	
	door.setFrobable( latchState );
	door.setKey( "ai_should_not_handle", !latchState );
}